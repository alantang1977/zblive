var rule = {
  title: 'XDXX',
  host: 'https://www.xdxx6298.one',
  //host: 'https://arx1010.1di3sg.com',
  url: '/type/fyclass/fypage.html',
  searchUrl: '/tags/page/fypage/wd/**.html',
  searchable: 2,
  hikerListCol: 'movie_2',
  hikerClassListCol:'movie_2',
  tab_rename: {'道长在线': '在线播放'},
  headers: {'User-Agent': 'MOBILE_UA',},
  timeout: 5000,
  class_parse: '.searchItems a;a&&Text;a&&href;/\\w+/(\\d+).html',
  play_parse: true,
  lazy: $js.toString(() => {
    input = {
      parse: 1,
      url: input,
      js: 'document.querySelector("#playleft iframe").contentWindow.document.querySelector("#start").click();'
    };
  }),
  double: true,
  lazy: $js.toString(() => {
    let html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);
    let url = html.url;
    if (html.encrypt == '1') {
      url = unescape(url)
    } else if (html.encrypt == '2') {
      url = unescape(base64Decode(url))
    }
    if (/\.m3u8|\.mp4/.test(url)) {
      input = {
        jx: 0,
        url: url,
        parse: 0
      }
    } else {
      input
    }
}),
  推荐: '.video-contaner;.video-surface;.text-one-line&&Text;.img-bg&&style;.video-item-tag-duration&&Text;a&&href;.play-icon&&Text',
  一级: '.video-surface;.text-one-line&&Text;.img-bg&&style;.video-item-tag-duration&&Text;a&&href;.play-icon&&Text',
  二级: '*',
  搜索: '.video-surface;.text-one-line&&Text;.img-bg&&style;.video-item-tag-duration&&Text;a&&href;.play-icon&&Text',
}